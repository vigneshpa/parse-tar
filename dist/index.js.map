{"mappings":"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","sources":["src/parseTar.ts"],"sourcesContent":["export default function parseTar(\n  tarfile: Blob\n): Promise<Readonly<TarFile<Blob>>[]>;\nexport default function parseTar(\n  tarfile: ArrayBuffer | ArrayBufferLike\n): Readonly<TarFile<Uint8Array>>[];\nexport default function parseTar(\n  tarfile: Blob | ArrayBuffer | ArrayBufferLike\n) {\n  if (tarfile instanceof Blob) {\n    return (async () => {\n      const input = new Blob([tarfile]);\n      const noOfBlocks = input.size / 512;\n      const files: Readonly<TarFile<Blob>>[] = [];\n      {\n        let blockIdx = 0;\n        while (blockIdx < noOfBlocks) {\n          const block = input.slice(blockIdx * 512, (blockIdx + 1) * 512);\n          if (await isEmptyBlock(block)) break;\n          const file = parseTarHeader<Blob>(await block.arrayBuffer());\n          const fileBlocksCount = Math.ceil(file.size / 512);\n          file.contents = input\n            .slice((blockIdx + 1) * 512, (blockIdx + 1 + fileBlocksCount) * 512)\n            .slice(0, file.size);\n          files.push(Object.freeze(file!));\n          blockIdx += fileBlocksCount + 1;\n        }\n      }\n      return files;\n    })();\n  } else {\n    const input = new Uint8Array(tarfile);\n    const noOfBlocks = input.byteLength / 512;\n    const files: Readonly<TarFile<Uint8Array>>[] = [];\n    {\n      let blockIdx = 0;\n      while (blockIdx < noOfBlocks) {\n        const block = input.slice(blockIdx * 512, (blockIdx + 1) * 512);\n        if (isEmptyBlock(block)) break;\n        const file = parseTarHeader<Uint8Array>(block);\n        const fileBlocksCount = Math.ceil(file.size / 512);\n        file.contents = input\n          .slice((blockIdx + 1) * 512, (blockIdx + 1 + fileBlocksCount) * 512)\n          .slice(0, file.size);\n        files.push(Object.freeze(file!));\n        blockIdx += fileBlocksCount + 1;\n      }\n      return files;\n    }\n  }\n}\nfunction isEmptyBlock(block: Blob): Promise<boolean>;\nfunction isEmptyBlock(block: Uint8Array): boolean;\nfunction isEmptyBlock(block: Blob | Uint8Array) {\n  if (block instanceof Blob)\n    return block\n      .arrayBuffer()\n      .then((val) => new Uint8Array(val))\n      .then((buf) => buf.every((val) => val === 0));\n  return block.every((val) => val === 0);\n}\n// https://en.wikipedia.org/wiki/Tar_(computing)#Header\nexport const enum TarFileType {\n  NormalFile = 0,\n  HardLink = 1,\n  SymbolicLink = 2,\n  CharacterSpecial = 3,\n  BlockSpecial = 4,\n  Directory = 5,\n  NamedFIFOPipe = 6,\n  ContiguousFile = 7,\n  Vendor = \"vendor\",\n}\nexport class TarFile<T extends Blob | Uint8Array> {\n  name: string = \"\";\n  mode: number = 0;\n  uid: number = 0;\n  gid: number = 0;\n  size: number = 0;\n  mtime: Date = new Date(0);\n  type: TarFileType = TarFileType.NormalFile;\n  linkname: string = \"\";\n  contents?: T;\n  uname: string = \"\";\n  gname: string = \"\";\n  deviceMajor: number = 0;\n  deviceMinor: number = 0;\n  fileNamePrefix: string = \"\";\n}\nlet ustarWarned = false;\nfunction parseTarHeader<T extends Blob | Uint8Array>(header: ArrayBuffer) {\n  const file = new TarFile<T>();\n  file.name = readString(header, 0, 100);\n  file.mode = readOctal(header, 100, 8);\n  file.uid = readOctal(header, 108, 8);\n  file.gid = readOctal(header, 116, 8);\n  file.size = readOctal(header, 124, 12);\n  file.mtime = new Date(readOctal(header, 136, 12) * 1000);\n  const checksum = readString(header, 148, 8);\n  const ftype = readString(header, 156, 1);\n  if (ftype)\n    if (ftype.charCodeAt(0) >= 48 && ftype.charCodeAt(0) <= 57)\n      file.type = ftype.charCodeAt(0);\n    else file.type = TarFileType.Vendor;\n  else file.type = TarFileType.NormalFile;\n  file.linkname = readString(header, 157, 100);\n\n  const ustarIndicator = readString(header, 257, 6);\n  if (ustarIndicator === \"ustar\") {\n    file.uname = readString(header, 265, 32);\n    file.gname = readString(header, 297, 32);\n    file.deviceMajor = readOctal(header, 329, 8);\n    file.deviceMinor = readOctal(header, 337, 8);\n    file.fileNamePrefix = readString(header, 345, 155);\n  } else if (!ustarWarned) {\n    console.warn(\"No Ustar indicator detected in tar file\");\n    ustarWarned = true;\n  }\n  return file;\n}\nfunction readString(input: ArrayBufferLike, start: number = 0, size?: number) {\n  const decoder = new TextDecoder(\"ascii\");\n  let buf = new Uint8Array(input.slice(start, size ? start + size : undefined));\n  const nullIdx = buf.indexOf(0);\n  buf = buf.slice(0, nullIdx);\n  return decoder.decode(buf);\n}\nfunction readOctal(input: ArrayBufferLike, start: number = 0, end?: number) {\n  return parseInt(readString(input, start, end), 8);\n}\n"],"names":[],"version":3,"file":"index.js.map"}