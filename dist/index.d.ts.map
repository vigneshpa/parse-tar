{"mappings":"AACA,OAAO,KAAK;IACV,UAAU,IAAI;IACd,QAAQ,IAAI;IACZ,YAAY,IAAI;IAChB,gBAAgB,IAAI;IACpB,YAAY,IAAI;IAChB,SAAS,IAAI;IACb,aAAa,IAAI;IACjB,cAAc,IAAI;IAClB,MAAM,WAAW;CAClB;AACD;IACE,IAAI,EAAE,MAAM,CAAM;IAClB,IAAI,EAAE,MAAM,CAAK;IACjB,GAAG,EAAE,MAAM,CAAK;IAChB,GAAG,EAAE,MAAM,CAAK;IAChB,IAAI,EAAE,MAAM,CAAK;IACjB,KAAK,EAAE,IAAI,CAAe;IAC1B,IAAI,EAAE,WAAW,CAA0B;IAC3C,QAAQ,EAAE,MAAM,CAAM;IACtB,QAAQ,EAAE,IAAI,CAAc;IAC5B,KAAK,EAAE,MAAM,CAAM;IACnB,KAAK,EAAE,MAAM,CAAM;IACnB,WAAW,EAAE,MAAM,CAAK;IACxB,WAAW,EAAE,MAAM,CAAK;IACxB,cAAc,EAAE,MAAM,CAAM;CAC7B;ACzBD,iCAAuC,OAAO,EAAE,IAAI,GAAG,IAAI,GAAG,WAAW,GAAG,eAAe,gCAiB1F","sources":["src/src/parseTarHeader.ts","src/src/parseTar.ts","src/parseTar.ts"],"sourcesContent":[null,null,"import parseTarHeader, { TarFile } from './parseTarHeader';\nexport { TarFile, TarFileType } from './parseTarHeader';\nexport default async function parseTar(tarfile: File | Blob | ArrayBuffer | ArrayBufferLike) {\n  const input = new Blob([tarfile]);\n  const noOfBlocks = input.size / 512;\n  const files: Readonly<TarFile>[] = [];\n  {\n    let blockIdx = 0;\n    while (blockIdx < noOfBlocks) {\n      const block = input.slice(blockIdx * 512, (blockIdx + 1) * 512);\n      if (await isEmptyBlock(block)) break;\n      const file = await parseTarHeader(block);\n      const fileBlocksCount = Math.ceil(file.size / 512);\n      file.contents = input.slice((blockIdx + 1) * 512, (blockIdx + 1 + fileBlocksCount) * 512).slice(0, file.size);\n      files.push(Object.freeze(file!));\n      blockIdx += fileBlocksCount + 1;\n    }\n  }\n  return files;\n}\n\nasync function isEmptyBlock(block: Blob) {\n  const buf = new Uint8Array(await block.arrayBuffer());\n  return buf.every(val => val === 0);\n}\n"],"names":[],"version":3,"file":"index.d.ts.map"}